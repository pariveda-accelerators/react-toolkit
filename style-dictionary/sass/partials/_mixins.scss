@use 'sass:color';
@use 'sass:math';
@use 'sass:map';
@import 'build/scss/variables';
@import 'functions';

@mixin mix-palette($paletteSeed: $color-palette-base) {
  $base-grey: map-get($paletteSeed, 'grey');
  $base-primary: map-get($paletteSeed, 'primary');
  $shade-count: map-get($paletteSeed, 'shade-count');
  $interval: math.floor(255 / $shade-count);

  $base: (
    'base': $base-grey,
    'shades': color.scale($base-grey, $lightness: -75%)
      color.scale($base-grey, $lightness: -50%)
      color.scale($base-grey, $lightness: -25%) $base-grey
      color.scale($base-grey, $lightness: 25%)
      color.scale($base-grey, $lightness: 50%)
      color.scale($base-grey, $lightness: 75%),
  );

  $palette-diff: palette-diff($base);
  @debug ($base);
  @debug ($palette-diff);
  $grey-palette: create-palette($base-grey, $palette-diff);

  $palette: ();

  $palette: map.merge(
    $palette,
    (
      'grey': $grey-palette,
    )
  );

  $color-count: 12;
  $interval: 360deg / $color-count;

  @for $i from 1 through $color-count {
    $color-name: color-#{$i};
    $color: adjust-hue($base-primary, $interval * ($i - 1));
    $palette: map.merge(
      $palette,
      (#{$color-name}: create-palette($color, $palette-diff))
    );
  }

  :root {
    --white: #fff;
    --black: #000;
    @each $color, $shades in $palette {
      @for $i from 1 through length($shades) {
        $shade: nth($shades, $i);
        --#{$color}-#{$i}: #{$shade};
      }
    }
  }
}
